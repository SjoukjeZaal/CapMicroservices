@page "/music"
@using BlazorSignalRApp.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IDisposable

<h1>Music</h1>

<p>These are the Albums we currently have for you.</p>

<h1>Albums</h1>

@if (OrderProcessed)
{
    <p>Order was processed!</p>
}
@if (albums == null)
{
    <p><em>Loading Albums...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Artist</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var album in albums)
            {
                <tr>
                    <td>@album.AlbumId</td>
                    <td>@album.Title</td>
                    <td>@album.Artist</td>
                    <td><button @onclick="@(e => OrderAlbum(album))">Order this album</button></td>
                    <td>@if (album.ProcessingOrder)
                        {
                            <p>Processing</p>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection hubConnection;
    private IEnumerable<Album> albums;
    private bool OrderProcessed = false;

    protected override async Task OnInitializedAsync()
    {
        albums = await Http.GetFromJsonAsync<IEnumerable<Album>>("Albums");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/musicstorehub"))
        .Build();

        hubConnection.On<IEnumerable<Album>>("OrderProcessed", boughtAlbums =>
        {
            // TODO: Do this in a much cooler way
            foreach (var album in albums)
            {
                foreach (var boughtAlbum in boughtAlbums)
                {
                    if (album.AlbumId == boughtAlbum.AlbumId)
                    {
                        album.ProcessingOrder = false;
                    }
                }
            }

            OrderProcessed = true;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task OrderAlbum(Album album)
    {
        await Http.PostAsJsonAsync("Albums", album);
        album.ProcessingOrder = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
