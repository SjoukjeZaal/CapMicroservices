#Set variables

azuread_admingroup=CapAdminMicroservices			# Azure AD Admin Group for AKS
azuread_devgroup=CapDevMicroservices				# Azure AD Developer Group for AKS

res_group=CapMicroservices         	    			# Resource Group name
acr_name=CapContainerRegistry    					# Azure Container Registry registry name
aks_name=CapAKSCluster         						# Azure Container Registry registry name

#acs_login_server=capcontainerregistry.azurecr.io    # ACS Login server


## PART 1: CREATE ACR

az account set --subscription "Microsoft Azure Sponsorship"

#create a resource group
az group create --name $res_group --location westeurope

#create a container registry, admin enabled
az acr create --resource-group $res_group --name $acr_name --sku Basic --admin-enabled true


#Retrieve admin password from the Azure portal

#Set admin credentials
admin_username=SZContainerRegistry                  	# Admin username
admin_password=/Nu8YMdTclNnelTQwNgUEJwJKQHePY=2         # Admin password

## END PART 1
## PART 2: Create the Azure AD enabled AKS Cluster

#For your cluster, you need an Azure AD group. This group is needed as admin group for the cluster to grant cluster admin permissions.

# Create an Azure AD group
az ad group create --display-name $azuread_admingroup --mail-nickname $azuread_admingroup

#Add admin to the group
#id=$(az ad user show --id yourlogin@domain.com --query objectId --output tsv)
id=$(az ad user show --id sjouk_je_live.nl#EXT#@sjoukjelive.onmicrosoft.com --query objectId --output tsv)
az ad group member add --group $azuread_admingroup --member-id $id 

#Retrieve AAD group id
groupid=$(az ad group show --group $azuread_admingroup --query objectId --output tsv) 

#Retrieve tenant-id
tenantid=$(az account show --query tenantId --output tsv) 

# Create an AKS-managed Azure AD cluster
az aks create \
  --resource-group $res_group \
  --name $aks_name \
  --enable-aad \
  --aad-admin-group-object-ids $groupid \
  --aad-tenant-id $tenantid 

#Integrate ACR with AKS cluster
az aks update \
  --name $aks_name \
  --resource-group $res_group \
  --attach-acr $acr_name
  
## END PART 2
## PART 3: Create Developer AD group and add developer account to it. 

#Get AKS ID
aks_id=$(az aks show \
    --resource-group $res_group \
    --name $aks_name \
    --query id -o tsv)

#Create new Dev group in Azure AD	
appdev_groupid=$(az ad group create --display-name $azuread_devgroup --mail-nickname $azuread_devgroup --query objectId -o tsv)

#Add developer account to group
dev_id=$(az ad user show --id szdemo2_outlook.com#EXT#@sjoukjelive.onmicrosoft.com --query objectId --output tsv)
az ad group member add --group $azuread_devgroup --member-id $dev_id 	
  
#Add Developer group to the Azure Kubernetes Service Cluster User Role
az role assignment create \
  --assignee $appdev_groupid \
  --role "Azure Kubernetes Service Cluster User Role" \
  --scope $aks_id


## END PART 2
## PART 3: Connect to the cluster using kubectl and deploy NGinx ingress

#Retrieve the credentials
az aks get-credentials --resource-group $res_group --name $aks_name --admin


#Create a Dev namespace
kubectl create namespace dev


#In Kubernetes, Roles define the permissions to grant, and RoleBindings apply them to desired users or groups.

cat <<EOF > role-dev-namespace.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dev-user-full-access
  namespace: dev
rules:
- apiGroups: ["", "extensions", "apps"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["batch"]
  resources:
  - jobs
  - cronjobs
  verbs: ["*"]
EOF

#Create the Role
kubectl apply -f role-dev-namespace.yaml

#get the resource ID for the appdev group
az ad group show --group $azuread_devgroup --query objectId --output tsv

#create a RoleBinding for the appdev group

cat <<EOF > rolebinding-dev-namespace.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dev-user-access
  namespace: dev
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dev-user-full-access
subjects:
- kind: Group
  namespace: dev
  name: groupObjectId #-- replace this with App Dev AD Group ID --#
EOF

#Create the RoleBinding
kubectl apply -f rolebinding-dev-namespace.yaml

## END PART 3


#Delete the resource group
#az group delete -n $res_group --no-wait --yes